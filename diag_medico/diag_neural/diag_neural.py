import streamlit as st
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import StandardScaler
import pandas as pd

st.set_page_config(page_title="Diagn√≥stico M√©dico", page_icon="üß†")
st.title("ü©∫ Diagn√≥stico M√©dico com Intelig√™ncia Artificial")

# Dados simulados
X = np.array([
    [36.5, 0, 0],
    [38.7, 1, 1],
    [37.2, 0, 0],
    [39.5, 1, 1],
    [37.8, 1, 0],
    [40.0, 1, 1],
    [36.9, 0, 0],
    [39.0, 1, 1]
])
y = np.array([0, 1, 0, 1, 1, 1, 0, 1])  # 0 = Saud√°vel, 1 = Doente

# Treinamento
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Normalizar os dados
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

clf = MLPClassifier(hidden_layer_sizes=(5,), max_iter=1000, random_state=42)
clf.fit(X_train, y_train)

# Entradas
st.markdown("Preencha os sintomas abaixo:")
temperatura = st.slider("Temperatura Corporal (¬∞C)", 35.0, 41.0, 36.5, 0.1)
dor_de_cabeca = st.selectbox("Dor de cabe√ßa?", ["N√£o", "Sim"])
fadiga = st.selectbox("Fadiga?", ["N√£o", "Sim"])

entrada = np.array([[temperatura, int(dor_de_cabeca == "Sim"), int(fadiga == "Sim")]])
entrada = scaler.transform(entrada)
predicao_modelo = clf.predict(entrada)[0]
proba = clf.predict_proba(entrada)[0]

# Classifica√ß√µes m√©dicas reais
def classificar_temperatura(temp):
    if temp < 35.4:
        return "Hipotermia"
    elif 35.4 <= temp <= 37.4:
        return "Normal"
    elif 37.5 <= temp <= 37.8:
        return "Febr√≠cula"
    elif 37.9 <= temp <= 39.0:
        return "Febre"
    else:
        return "Febre Alta"

def classificar_gravidade(temp, dor, fadiga):
    if temp < 37.5 and not dor and not fadiga:
        return "Saud√°vel"
    elif 37.5 <= temp < 38.0:
        return "Doen√ßa Leve"
    elif 38.0 <= temp <= 39.0 and dor and fadiga:
        return "Doen√ßa Moderada"
    elif temp > 39.0 and dor and fadiga:
        return "Doen√ßa Grave"
    else:
        return "Doen√ßa Leve"

nivel_temp = classificar_temperatura(temperatura)
gravidade = classificar_gravidade(temperatura, dor_de_cabeca == "Sim", fadiga == "Sim")

# Decis√£o final com l√≥gica refor√ßada
if gravidade != "Saud√°vel":
    predicao_final = 1  
else:
    predicao_final = predicao_modelo  

# Resultado
st.subheader("üî¨ Resultado do Diagn√≥stico:")
if predicao_final == 0:
    st.success("**Diagn√≥stico Previsto: Saud√°vel**")
    st.write("‚úÖ Nenhum sinal grave detectado.")
else:
    st.error("**Diagn√≥stico Previsto: Doente**")
    st.write(f"ü©∫ Gravidade da condi√ß√£o: **{gravidade}**")
    if gravidade == "Doen√ßa Grave":
        st.warning("‚ö†Ô∏è **Comunicado Importante:** Procure um m√©dico imediatamente para avalia√ß√£o e tratamento adequado.")
        
        # Poss√≠veis causas de Doen√ßa Grave
        st.write("### Poss√≠veis causas para Doen√ßa Grave:")
        st.write("- **Infec√ß√µes graves**: Pneumonia, meningite, septicemia.")
        st.write("- **Doen√ßas inflamat√≥rias**: Febre reum√°tica, doen√ßa de Kawasaki.")
        st.write("- **Condi√ß√µes metab√≥licas**: Crise tireot√≥xica, desidrata√ß√£o severa.")
        st.write("- **Outras causas**: Choque s√©ptico, complica√ß√µes de doen√ßas cr√¥nicas.")

# Motivos
st.write("### Motivos para o diagn√≥stico:")
st.write(f"- **Temperatura Corporal:** {temperatura:.1f} ¬∞C ({nivel_temp})")
if dor_de_cabeca == "Sim":
    st.write("- **Dor de Cabe√ßa:** Presente")
else:
    st.write("- **Dor de Cabe√ßa:** Ausente")
if fadiga == "Sim":
    st.write("- **Fadiga:** Presente")
else:
    st.write("- **Fadiga:** Ausente")

# Probabilidade
st.write("### Probabilidades do Modelo:")
if hasattr(clf, "predict_proba"):
    proba = clf.predict_proba(entrada)[0]
    st.write(f"- Saud√°vel: {proba[0] * 100:.1f}%")
    st.write(f"- Doente: {proba[1] * 100:.1f}%")
else:
    st.warning("O modelo n√£o suporta c√°lculo de probabilidades.")

# Avalia√ß√£o
y_pred = clf.predict(X_test)
acuracia = np.mean(y_pred == y_test) * 100

# Gerar a matriz de confus√£o com todas as classes
cm = confusion_matrix(y_test, y_pred, labels=[0, 1])  # 0 = Saud√°vel, 1 = Doente
labels = ["Saud√°vel", "Doente"]

# Exibir a matriz de confus√£o
st.subheader("üìä Avalia√ß√£o do Modelo")
st.write("### Matriz de Confus√£o:")
st.dataframe(pd.DataFrame(cm, index=labels, columns=labels))

# Exibir a acur√°cia
st.write(f"- **Acur√°cia:** {acuracia:.2f}%")
